<#
    .NOTES
    --------------------------------------------------------------------------------
     Generated on:       5/21/2022 14:30
     Generated by:       The MSP Automator
     Organization:       MSPAutomator.com
    --------------------------------------------------------------------------------
    .DESCRIPTION
        HaloPSA REST API wrapper for Powershell - v1.0
#>

$Global:TokenFile = "C:\.HaloAPI\Token.log"
$Global:HaloUrl
$Global:RawUser
$Global:ClientID
$Global:ClientSecret

function Write-Log #Function for logging
{
	[CmdletBinding()]
	param (
		[Parameter(Mandatory = $true)]
		[string]$Message,
		[Validateset("INFO", "ERR", "WARN")]
		[string]$Type = "INFO"
	)
	
	$DateTime = Get-Date -Format "MM-dd-yyyy HH:mm:ss"
	$FinalMessage = "[{0}]::[{1}]::[{2}]" -f $DateTime, $Type, $Message
	
	#Storing the output in the log file
	Write-Verbose $FinalMessage
}

<#
	.SYNOPSIS
		Checks for a valid HaloPSA token cached on disk.
	
	.DESCRIPTION
		Checks C:\.HaloAPI for a current bearer token.
	
	.EXAMPLE
		PS C:\> Check-Token
	
	.NOTES
		This token file is disposed of after 5 minutes or when an Azure runbook finishes.
#>
function Check-Token
{
	try
	{
		Write-Log "Checking Token - $TokenFile"
		
		if (-Not (Test-Path -Path $TokenFile))
		{
			New-Item -Path $TokenFile -ItemType Directory
		}
		
		if (-Not (Test-Path -Path $TokenFile -PathType Leaf))
		{
			Write-Log "Token Location is not found. Please run Connect-HaloPSA" -Type ERR
			return $false
		}
		
		$Token = Get-Content -Path $TokenFile -EA Stop | ConvertFrom-Json
		
		if ($(Get-Date) -lt (Get-Date $Token.Expiry_Time))
		{
			Write-Log "Token is still valid"
			return $true
		}
		else
		{
			Write-Log "Token expired"
			return $false
		}
		
	}
	catch
	{
		Write-Log "Unable to Check Token - $_" -Type ERR
		return $false
	}
}

<#
	.SYNOPSIS
		Gets a bearer token via REST API .
	.EXAMPLE
		PS C:\> Get-Token -ClientID 'value1' -ClientSecret 'value2'
#>
function Get-Token
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ClientID,
		[Parameter(Mandatory = $true)]
		[string]$ClientSecret,
		[Parameter(Mandatory = $true)]
		[string]$HaloUrl,
		[Parameter(Mandatory = $true)]
		[string]$RawUser
	)
	
	try
	{
		
		Write-Log "Getting Token"
		
		$Headers = @{
			'Content-Type' = 'application/x-www-form-urlencoded'
			'Accept'	   = 'application/json'
		}
		
		$Body = "grant_type=password&client_id=$ClientID&username=$RawUser&password=$ClientSecret&scope=all"
		Write-Log $Body
		
		$Response = Invoke-RestMethod -Uri "$($HaloUrl)/auth/token" -Method 'POST' -Headers $Headers -Body $Body -EA Stop
		Write-Log $Response
		$Response | Add-Member -NotePropertyName Expiry_Time -NotePropertyValue $(Get-Date).AddHours($($Response.expires_in)/3600)
		$Response | ConvertTo-Json | Out-File -FilePath $TokenFile -EA Stop
		
		Write-Log "Successfully Stored the Token JSON"
	}
	catch
	{
		Write-Log "Error while getting token - $_" -Type ERR
	}
}

function Read-Token
{
	try
	{
		if (-Not (Test-Path -Path $TokenFile))
		{
			Connect-HaloPSA -ClientID $ClientID -ClientSecret $ClientSecret -HaloUrl $HaloUrl -RawUser $RawUser
		}
		
		$Token = Get-Content -Path $TokenFile -EA Stop | ConvertFrom-Json
		return $Token.access_token
	}
	catch
	{
		Write-Log "Problem reading token from file - $_"
	}
}


function Get-TicketStatus
{
	param (
		[string]$TicketID
	)
	
	try
	{
		$Token = Read-Token -EA Stop
		
		$Headers = @{
			'Content-Type'  = 'application/json'
			'Authorization' = "Bearer $Token"
		}
		
		Write-Log "Reading Ticket states for $TicketID"
		$Response = Invoke-RestMethod "$($HaloUrl)/api/Actions/?ticket_id=$TicketID" -Method 'GET' -Headers $headers -EA Stop
		
		$Reply = $Response.actions.outcome | ConvertTo-Json
		return $reply
	}
	catch
	{
		Write-Log "Getting Ticket Status failed - $_" -Type ERR
		return $null
	}
}

function Get-Ticket
{
	param (
		[string]$TicketID
	)
	
	try
	{
		$Token = Read-Token -EA Stop
		
		$Headers = @{
			'Content-Type'  = 'application/json'
			'Authorization' = "Bearer $Token"
		}
		
		Write-Log "Reading Ticket status for $TicketID"
		$Response = Invoke-RestMethod "$($HaloUrl)/api/tickets/$TicketID" -Method 'GET' -Headers $headers -EA Stop
		
		Write-Log "Date Created - $($Response.dateoccurred)" -ForegroundColor Cyan
		Write-Log "Summary - $($Response.summary)" -ForegroundColor Cyan
		Write-Log "Details - $($Response.details)" -ForegroundColor Cyan
		Write-Log "Status ID - $($Response.status_id)" -ForegroundColor Cyan
		Write-Log "Priority ID - $($Response.priority_id)" -ForegroundColor Cyan
	}
	catch
	{
		Write-Log "Getting Ticket Status failed - $_" -Type ERR
	}
}

function Create-Ticket
{
	param (
		[Parameter(Mandatory = $true)]
		[string]$summary,
		[Parameter(Mandatory = $true)]
		[string]$details_html,
		[string]$Details,
		[string]$status_id = 0,
		[string]$tickettype_id = 0,
		[string]$sla_id = 0,
		[string]$priority_id = 0,
		[string]$client_id = 0,
		[string]$client_name = "Unknown",
		[string]$site_id = 0,
		[string]$site_name = "Unknown",
		[string]$user_id = 0,
		[string]$user_name = "General User",
		[string]$team = "1st Line Support",
		[string]$agent_id = 0,
		[string]$category_1 = "",
		[string]$category_2 = "",
		[string]$category_3 = "",
		[string]$category_4 = "",
		[string]$estimate = 0,
		[string]$timetaken = 0,
		[string]$supplier_name = "string",
		[string]$parent_id = 0,
		[string]$child_count = 0,
		[string]$attachment_count = 0,
		[string]$flagged = $true,
		[string]$read = $true,
		[string]$enduserstatus = 0,
		[string]$onhold = $true,
		[string]$respondbydate = "",
		[string]$responsedate = "",
		[string]$responsestartdate = "",
		[string]$slaresponsestate = "string",
		[string]$fixbydate = "",
		[string]$dateclosed = "",
		[string]$excludefromsla = $true,
		[string]$slaholdtime = 0,
		[string]$site_timezone = "string",
		[string]$slaactiondate = "",
		[string]$slapercused = 0,
		[string]$slatimeleft = 0,
		[string]$lastactiondate = "",
		[string]$organisation_id = 0,
		[string]$department_id = 0,
		[string]$reportedby = "string",
		[string]$user_email = "string",
		[string]$emailtolist = "string",
		[string]$emailcclist = "string",
		[string]$child_ticket_id_string = "string",
		[int]$child_ticket_ids = 0,
		[string]$nextactivitydate = "",
		[string]$inventory_number = "string",
		[string]$workflow_id = 0,
		[string]$workflow_step = 0,
		[string]$hasbeenclosed = $true,
		[string]$unread_child_action_count = 0,
		[string]$child_action_count = 0,
		[string]$is_vip = $true,
		[string]$isimportantcontact = $true,
		[string]$impact = 0,
		[string]$urgency = 0,
		[string]$startdate = "",
		[string]$starttime = "",
		[string]$targetdate = "",
		[string]$targettime = "",
		[string]$deadlinedate = "",
		[string]$followupdate = "",
		[string]$lastnote = "string",
		[string]$phonenumber = "string",
		[string]$takenby = "string",
		[string]$datecreated = "",
		[string]$createdfrom_id = 0,
		[string]$closure_note = "string",
		[string]$closure_time = 0,
		[string]$closure_agent_id = 0
		
	)
	
	try
	{
		$Token = Read-Token -EA Stop
		
		Write-Log "Attempting ticket creation..."
		
		$Headers = @{
			'Content-Type'  = 'application/json'
			'Authorization' = "Bearer $Token"
		}
		
		$Body =@"
        [{
            "summary":"$summary",
            "details": "$Details",
            "status_id":"$status_id",
            "tickettype_id":"$tickettype_id",
            "sla_id":"$sla_id",
            "priority_id":"$priority_id",
            "client_id":"$client_id",
            "client_name":"$client_name",
            "site_id":"$site_id",
            "site_name":"$site_name",
            "user_id":"$user_id",
            "user_name":"$user_name",
            "team":"$team",
            "agent_id":"$agent_id",
            "category_1":"$category_1",
            "category_2":"$category_2",
            "category_3":"$category_3",
            "category_4":"$category_4",
            "estimate":"$estimate",
            "timetaken":"$timetaken",
            "supplier_name":"$supplier_name",
            "parent_id":"$parent_id",
            "child_count":"$child_count",
            "attachment_count":"$attachment_count",
            "flagged":"$flagged",
            "read":"$read",
            "enduserstatus":"$enduserstatus",
            "onhold":"$onhold",
            "respondbydate":"$respondbydate",
            "responsedate":"$responsedate",
            "responsestartdate":"$responsestartdate",
            "slaresponsestate":"$slaresponsestate",
            "fixbydate":"$fixbydate",
            "dateclosed":"$dateclosed",
            "excludefromsla":"$excludefromsla",
            "slaholdtime":"$slaholdtime",
            "site_timezone":"$site_timezone",
            "slaactiondate":"$slaactiondate",
            "slapercused":"$slapercused",
            "slatimeleft":"$slatimeleft",
            "lastactiondate":"$lastactiondate",
            "organisation_id":"$organisation_id",
            "department_id":"$department_id",
            "reportedby":"$reportedby",
            "user_email":"$user_email",
            "emailtolist":"$emailtolist",
            "emailcclist":"$emailcclist",
            "child_ticket_id_string":"$child_ticket_id_string",
            "child_ticket_ids":[$child_ticket_id],
            "nextactivitydate":"$nextactivitydate",
            "inventory_number":"$inventory_number",
            "workflow_id":"$workflow_id",
            "workflow_step":"$workflow_step",
            "hasbeenclosed":"$hasbeenclosed",
            "unread_child_action_count":"$unread_child_action_count",
            "child_action_count":"$unread_child_action_count",
            "is_vip":"$is_vip",
            "isimportantcontact":"$isimportantcontact",
            "impact":"$impact",
            "urgency":"$urgency",
            "startdate":"$startdate",
            "starttime":"$starttime",
            "targetdate":"$targetdate",
            "targettime":"$targettime",
            "deadlinedate":"$deadlinedate",
            "followupdate":"$followupdate",
            "lastnote":"$lastnote",
            "phonenumber":"$phonenumber",
            "details_html":"$details_html",
            "takenby":"$takenby",
            "datecreated":"$datecreated",
            "createdfrom_id":"$createdfrom_id",
            "closure_note":"$closure_note",
            "closure_time":"$closure_time",
		"closure_agent_id":"$closure_agent_id"
	}]
"@
	
		$Response = Invoke-RestMethod "$($HaloUrl)/api/tickets" -Method 'POST' -Headers $headers -Body $Body -EA Stop
		
		$Reply = $Response.id | ConvertTo-Json
		Write-Log "Ticket created successfully. Ticket ID is $reply"
		
		return $reply
	}
	catch
	{
		Write-Log "Creating Ticket failed - $_" -Type ERR
		return $null
	}
}


function Update-Ticket
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TicketID,
		[string]$summary,
		[string]$details_html,
		[string]$Details,
		[string]$status_id = '0',
		[string]$tickettype_id = '0',
		[string]$sla_id = '0',
		[string]$priority_id = '0',
		[string]$client_id = '0',
		[string]$client_name = "",
		[string]$site_id = '0',
		[string]$site_name = "",
		[string]$user_id = '0',
		[string]$user_name = "",
		[string]$team = "",
		[string]$category_1 = "",
		[string]$category_2 = "",
		[string]$category_3 = "",
		[string]$category_4 = "",
		[string]$estimate = '0',
		[string]$timetaken = '0',
		[string]$supplier_name = "",
		[string]$parent_id = '0',
		[string]$child_count = '0',
		[string]$attachment_count = '0',
		[string]$flagged = $true,
		[string]$read = $true,
		[string]$enduserstatus = '0',
		[string]$onhold = $true,
		[string]$respondbydate = "",
		[string]$responsedate = "",
		[string]$responsestartdate = "",
		[string]$slaresponsestate = "",
		[string]$fixbydate = "",
		[string]$dateclosed = "",
		[string]$excludefromsla = $true,
		[string]$slaholdtime = '0',
		[string]$site_timezone = "",
		[string]$slaactiondate = "",
		[string]$slapercused = '0',
		[string]$slatimeleft = '0',
		[string]$lastactiondate = "",
		[string]$organisation_id = '0',
		[string]$department_id = '0',
		[string]$reportedby = "",
		[string]$user_email = "",
		[string]$emailtolist = "",
		[string]$emailcclist = "",
		[string]$child_ticket_id_string = "",
		[int]$child_ticket_ids = 0,
		[string]$nextactivitydate = "",
		[string]$inventory_number = "",
		[string]$workflow_id = '0',
		[string]$workflow_step = '0',
		[string]$hasbeenclosed = $true,
		[string]$unread_child_action_count = '0',
		[string]$child_action_count = '0',
		[string]$is_vip = $true,
		[string]$isimportantcontact = $true,
		[string]$impact = '0',
		[string]$urgency = '0',
		[string]$startdate = "",
		[string]$starttime = "",
		[string]$targetdate = "",
		[string]$targettime = "",
		[string]$deadlinedate = "",
		[string]$followupdate = "",
		[string]$lastnote = "",
		[string]$phonenumber = "",
		[string]$takenby = "",
		[string]$datecreated = "",
		[string]$createdfrom_id = '0',
		[string]$closure_note = "",
		[string]$closure_time = '0',
		[string]$closure_agent_id = '0'
	)
	
	try
	{
		$Token = Read-Token -EA Stop
		
		Write-Log "Trying to update ticket..."
		
		$Headers = @{
			'Content-Type'  = 'application/json'
			'Authorization' = "Bearer $Token"
		}
		
		$Body = @"
        [{
			"id":"$TicketID",
            "summary":"$summary",
            "details": "$Details",
            "status_id":"$status_id",
            "tickettype_id":"$tickettype_id",
            "sla_id":"$sla_id",
            "priority_id":"$priority_id",
            "client_id":"$client_id",
            "client_name":"$client_name",
            "site_id":"$site_id",
            "site_name":"$site_name",
            "user_id":"$user_id",
            "user_name":"$user_name",
            "team":"$team",
            "agent_id":"$agent_id",
            "category_1":"$category_1",
            "category_2":"$category_2",
            "category_3":"$category_3",
            "category_4":"$category_4",
            "estimate":"$estimate",
            "timetaken":"$timetaken",
            "supplier_name":"$supplier_name",
            "parent_id":"$parent_id",
            "child_count":"$child_count",
            "attachment_count":"$attachment_count",
            "flagged":"$flagged",
            "read":"$read",
            "enduserstatus":"$enduserstatus",
            "onhold":"$onhold",
            "respondbydate":"$respondbydate",
            "responsedate":"$responsedate",
            "responsestartdate":"$responsestartdate",
            "slaresponsestate":"$slaresponsestate",
            "fixbydate":"$fixbydate",
            "dateclosed":"$dateclosed",
            "excludefromsla":"$excludefromsla",
            "slaholdtime":"$slaholdtime",
            "site_timezone":"$site_timezone",
            "slaactiondate":"$slaactiondate",
            "slapercused":"$slapercused",
            "slatimeleft":"$slatimeleft",
            "lastactiondate":"$lastactiondate",
            "organisation_id":"$organisation_id",
            "department_id":"$department_id",
            "reportedby":"$reportedby",
            "user_email":"$user_email",
            "emailtolist":"$emailtolist",
            "emailcclist":"$emailcclist",
            "child_ticket_id_string":"$child_ticket_id_string",
            "child_ticket_ids":[$child_ticket_id],
            "nextactivitydate":"$nextactivitydate",
            "inventory_number":"$inventory_number",
            "workflow_id":"$workflow_id",
            "workflow_step":"$workflow_step",
            "hasbeenclosed":"$hasbeenclosed",
            "unread_child_action_count":"$unread_child_action_count",
            "child_action_count":"$unread_child_action_count",
            "is_vip":"$is_vip",
            "isimportantcontact":"$isimportantcontact",
            "impact":"$impact",
            "urgency":"$urgency",
            "startdate":"$startdate",
            "starttime":"$starttime",
            "targetdate":"$targetdate",
            "targettime":"$targettime",
            "deadlinedate":"$deadlinedate",
            "followupdate":"$followupdate",
            "lastnote":"$lastnote",
            "phonenumber":"$phonenumber",
            "details_html":"$details_html",
            "takenby":"$takenby",
            "datecreated":"$datecreated",
            "createdfrom_id":"$createdfrom_id",
            "closure_note":"$closure_note",
            "closure_time":"$closure_time",
            "closure_agent_id":"$closure_agent_id"
        }]
"@
		$Response = Invoke-RestMethod "$($HaloUrl)/api/tickets" -Method 'POST' -Headers $headers -Body $Body -EA Stop
		
		$Reply = $Response.id | ConvertTo-Json
		Write-Log "Ticket Updated successfully. Ticket ID is $reply"
		
		return $reply
	}
	catch
	{
		Write-Log "Update Ticket failed - $_" -Type ERR
		return $null
	}
}

<#
	.SYNOPSIS
		Creates a private note on a given ticket.
	
	.DESCRIPTION
		Creates a private note on a given ticket ID.
	
	.PARAMETER TicketID
		Integer value of the ticket you're trying to post the private note to.
	
	.PARAMETER Note
		String value of the note you want to add.
	
	.EXAMPLE
		PS C:\> Create-HaloPrivateNote -TicketID 123456 -Note 'This is a private note example'
	
#>
function Create-HaloPrivateNote
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$TicketID,
		[Parameter(Mandatory = $true)]
		[string]$Note
	)
	
	try
	{
		$Token = Read-Token -EA Stop
		
		Write-Log "Trying to update ticket..."
		
		$Headers = @{
			'Content-Type'  = 'application/json'
			'Authorization' = "Bearer $Token"
		}
		
		$Body = @"
        [{
			"ticket_id":$TicketID,
			"outcome":"Private Note",
			"outcome_id":7,
			"who_type":1,
			"who":"HaloAPI",
			"who_agentid":25,
			"hiddenfromuser":1,
			"note":"$Note"
           
        }]
"@
		$Response = Invoke-RestMethod "$($HaloUrl)/api/actions" -Method 'POST' -Headers $headers -Body $Body -EA Stop
		
		$Reply = $Response.id | ConvertTo-Json
		Write-Log "Ticket Updated successfully. Ticket ID is $reply"
		
		return $reply
	}
	catch
	{
		Write-Log "Update Ticket failed - $_" -Type ERR
		return $null
	}
}


<#
	.SYNOPSIS
		Connects to HaloPSA and gets a bearer token.
		
	.EXAMPLE
		PS C:\> Connect-HaloPSA -ClientID "<your client ID>" -ClientSecret "<your client secret>"
	
	.NOTES
		This module requires you configure your HaloAPI integration to post as a user.
#>
function Connect-HaloPSA
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$ClientID,
		[Parameter(Mandatory = $true)]
		[string]$ClientSecret,
		[Parameter(Mandatory = $true)]
		[string]$HaloUrl,
		[Parameter(Mandatory = $true)]
		[string]$RawUser
	)
	
	try
	{
		Write-Log "Authenticating with API"
		if (-Not (Check-Token))
		{
			Get-Token -ClientID $ClientID -ClientSecret $ClientSecret -HaloUrl $HaloUrl -RawUser $RawUser Stop
		}
	}
	catch
	{
		Write-Log "Error while authenticating with API" -Type ERR
	}
}
	